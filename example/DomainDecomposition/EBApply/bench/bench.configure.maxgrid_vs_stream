#!/usr/bin/python
from argparse import *
import os
import glob
import platform

parser = ArgumentParser()

parser.add_argument('--minstream',  type=int, help='minimum number of streams'  , default='1')
parser.add_argument('--maxstream',  type=int, help='minimum number of streams'  , default='16')
parser.add_argument('--min_grid' ,  type=int, help='minimum max box size '  , default='8')
parser.add_argument('--max_grid' ,  type=int, help='maximum max box size '  , default='8')
parser.add_argument('--maxstream',  type=int, help='minimum number of streams'  , default='16')

parser.add_argument('--input'               ,  help='input file prefix'         , default='./inputs.prefix')
parser.add_argument('--batch'               ,  help='batch file name'           , default='./batch')
parser.add_argument('--dir'                 ,  help='directory prefix'          , default='_benchmark')
parser.add_argument('--subcomm'             ,  help='submission script command' , default='source')
args = parser.parse_args()

print args
inputsname = args.input
batchname  = args.input
dirname    = args.dir
commname   = args.subcomm
mingrid    = args.min_grid
maxgrid    = args.max_grid

f_input = open(inputsname,'r')
f_batch = open(batchname, 'r')
inputs_prefix  = f_input.read()
batch_template = f_batch.read()

f_input.close()
f_batch.close()

targets=['DomainDecomposition/Euler',  'DomainDecomposition/EBApply']

now = datetime.datetime.now()
start_directory= top + nch.'+ str(now.month) + "." + str(now.day) + "." + str(now.year)

top = os.getcwd()
chombo_home = top + '/..'
os.chdir(chombo_home+'/mk')
f_mach_dep = open('Make.defs.local','r')
mach_dep = f_mach_dep.read()
f_mach_dep.close()
os.chdir(top)

for t in targets:
    d= t+'/exec'
    print d
    os.chdir(d)
    f = open('GNUmakefile','w')
    f.write('\nCHOMBO_HOME := ' + chombo_home)
    f.write('\nDIM := ' + str(args.dim)+"\n")
    f.write(makefile_pref);

    f.write(mach_dep);

    if args.mpi == 'TRUE':
        f.write('\nCPPFLAGS += -DCH_MPI -DMPICH_SKIP_MPICXX -ULAM_WANT_MPI2CPP -DMPI_NO_CPPBIND')

    if(args.hdf5 == 'TRUE'):
        f.write('\nCPPFLAGS += -DCH_USE_HDF5')

    if(args.prec == 'DOUBLE'):
        f.write('\nCXXFLAGS += -DCH_USE_DOUBLE')

    if args.opt == 'DEBUG':
        f.write('\nCXXFLAGS+=$(CXXDBGFLAGS) ')
    else:
        f.write('\nCXXFLAGS+=$(CXXOPTFLAGS) ')
   

    if args.cuda == 'TRUE':
        f.write('\nCXXFLAGS+=-DPROTO_CUDA=1 -x cu --expt-extended-lambda')
        if args.opt == 'DEBUG':
            f.write('\nCXXFLAGS+=-G -DTHRUST_DEBUG')

    f.write(makefile_post);
 
    os.chdir(top)
    f.close()

